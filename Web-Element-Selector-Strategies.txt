# ----------------------------------------------
# Locator Types
# ----------------------------------------------
1. ids
2. names
3. class names
* However, not all elements have one of these.


# ----------------------------------------------
# CSS Selectors
# ----------------------------------------------
* An advanced locator type. They can help us find more types of elements.
* CSS Selectors are expressions that use pattern matching to find elements on a webpage.
* You can add an element plus a class name. eg. div.result
* Or you can just put the class name. eg .result or .classname
* Could also search by id. DuckDuckGo's search bar -> #search_form_input
* One way CSS Selectors really shine is that they can chain together parent child relationships for elements.
    eg. div.cw div.result 
or  eg. div.cw > div.result <- forces parent child relationship
* You can combine CSS Selectors by adding a comma. eg. ol, ul 
or  eg. ol > li, ul > li
* CSS Selector to selct attributes. eg. [style] 
or  eg. div[style] 
or  eg. a[data-zci-link] 
or  eg. a[data-zci-link='images']
or  eg. div[class*='result']
or  eg. div.result:not(.result--more)
or  eg. div.result:nth-child(3)
or eg. div.footer_cards a[data-id='tips']
* Keep things simple enough, but understandable and unique. 
* CSS Selectors are great web element locators.
* They can be much more specific than IDs and class names for the elements they select. They also use CSS syntax, so most web developers already know how to use them.
* They can also become complex and sometimes, unnecessarily complex.

### Basic CSS Selector Examples
* Tag name: div
* Class name: .result
* Tag and class name: div.result
* ID: #search_form_input
* Descendants: div.cw div.result
* Direct children: li.zcm__item > a
* Multiple selectors: ol, ul
* Attribute existence: [style]
* Tag with attribute: div[style]
* Tag with attribute equality: a[data-zci-link='images']
* Tag with attribute contains: div[class*='results']
* Logical not pseudoclass: div.result:not(.result--more)
* Nth child pseudoclass: div.result:nth-child(5)

# --------------------------------------------------
# XPaths
# --------------------------------------------------

* Strongest locator type. Can uniquely identify any element on a page. It can be used for both HTML and XML documents.
* However it is the most complicated type.


# Basic Xpath Rules and Example

Path from root
/html/body

Tag anywhere
//input

Direct Children
//ul/li/a

Descendants
//div/a

Any Element
//*

Any Descendants
//div//*

Attribute Value Equality
//li[@class='zcm__item']

Attribute Condition AND
//img[@width<20][@height<20]
//img[@width<20 and @height<20]

Attribute Condition OR
//input[@name='q' or @id='search_form_input']

Contains Function
//div[contains(@class, 'result')]
//div[contains(@class, 'result__snippet')]

Starts with function
//div[starts-with(@class, 'result')]

Logical not function
//a[not(contains(@class, 'header'))]

# ---------------------------------------------
# XPaths advanced
# ---------------------------------------------

* What are specific things XPath can do that CSS Selectors cannot? 
    Three major things are text, indices, and relational positions.

Text
* The first major ability is selecting elements by text.
    Examples

    //div[contains(@class, 'result__snippet')

    //div[contains(@class, 'result__snippet')][contains(., 'bamboo')]

    //div[contains(@class, 'result__snippet')][not(contains(., 'bamboo'))]

Index
* The second major ability for XPath is selecting elements by index.
    Examples

    (//div[contains(@class, 'result__snippet')])[3]  

* Note that XPath indices start with 1 and not 0 (this means that the third position is index 3, not index 2 as it would be the case in most programming languages). 
    The parentheses around the XPath expression makes sure that the index is applied correctly.

    Caution
        * Text and indices make for fragile locators.
        * Element text is more likely to change than other anchors, as people change page content. 
            Element text also won't work well when a web page is translated into other languages for internationalization and localization.
        * Indexes are based entirely upon element count and order, which could easily be changed by developers. 
            Index numbers also don't always convey much meaning and can add confusion, whereas other attributes are often more descriptive 
            and intuitive. Therefore, I recommend using text and indices in locators only when absolutely necessary.

Relational position
* The third major ability for XPath is finding elements relative to other elements using advanced relationships.
* This is helpful when the desired element doesn't have a decent anchor of its own, or when trying to select a range of elements in a list.

    Examples
        * Links on the page that have an image inside of them. I could write a locator like this: //a to get any link on the page, square brackets for a conditional statement, and then .//image:
            //a[.//img]

        * XPath also has a bunch of axes for relationships to the current node.  
            //a[contains(@class, 'zcm__link')]
            //a[contains(@class, 'zcm__link')][preceding::a[@data-zci-link='web']]
            //a[contains(@class, 'zcm__link')][following::a[@data-zci-link='videos']]

         * As a side note, these axes will check preceding and following elements anywhere in the DOM. 
            To limit the checks to children of the same parent, use the "preceding-sibling" and "following-sibling" axes instead.  

         * Historically, CSS Selectors have been favored over XPaths for two main reasons: simplicity and speed.

         * However, both of these reasons are somewhat doubtful. CSS Selectors and XPaths both have similarly complex language with XPath being only slightly more verbose. 
            Anecdotally, I haven't witnessed much of a performance difference between the two and some more recent experiments you can find online by others have shown 
            no statistically significant performance difference between the two across several browsers. So, take that as face value.

        * Overall though, XPaths are a very powerful locator type. They may be overkill for many circumstances, but don't feel guilty about using XPaths whenever they are needed.


# ---------------------------------------------
# Picking the right locator
# ---------------------------------------------

Order of Preference

1. ID 9if the ID is unique on the page)
2. Input name (if the name is unique on the page)
3. Class name
4. CSS Selector
5. XPath without test or indexing
6. Link text or patial link text
7. XPath with text and/or indexing

* The first three are the best.
* You want to keep things simple.
* You shouldn't jump to using XPaths whenever ID's and class names would suffice. Test automation should always be as intuitive as possible.
* Caution - Avoid using chrome dev tools to generate CSS selectors and XPaths.
    * Many times, though, dev tools will return locators that pinpoint an element by position rather than by content or locators that avoid class names or use improper class names.
    * Chrome's results can be helpful as a starting point, but don't simply copy and paste them into your tool or your automation code.
    * Stick to the rules that we know will work.


# --------------------------------------------
# Using locators for testing
# --------------------------------------------

Codeless automation
* Good for manual testers who don't do programming.
* Write test procedures using a builder or recorder.

Examples
* Selenium IDE
* SmartBear TestComplete
* TestCraft
* Cycle automation

Coded Automation
* Test automation frameworks and programming packages.
* Requires software development skills.
* WebDriver for blackbox Web UI interactions.

Examples
* WebDriver (Selenium, Appium, Protractor, WebDriver.io)
* Frameworks (Cucumber, JUnit, NUnit, Mocha, pytest)
